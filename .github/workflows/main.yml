name: Docker Development Build

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  DOCKER_IMAGE: ardialqlause/personal-landing-page
  VITE_EMAILJS_PUBLIC_KEY: ${{ secrets.VITE_EMAILJS_PUBLIC_KEY }}
  VITE_EMAILJS_SERVICE_ID: ${{ secrets.VITE_EMAILJS_SERVICE_ID }}
  VITE_EMAILJS_TEMPLATE_ID_1: ${{ secrets.VITE_EMAILJS_TEMPLATE_ID_1 }}
  VITE_EMAILJS_TEMPLATE_ID_2: ${{ secrets.VITE_EMAILJS_TEMPLATE_ID_2 }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.prod
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:prod
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 92.113.145.8 >> ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          ssh ardial@92.113.145.8 '
            sudo bash -c "
              # Pull the latest image
              docker pull ${{ env.DOCKER_IMAGE }}:prod
              
              docker stop personal 2>/dev/null || true
              docker rm personal  2>/dev/null || true
              
              port_containers=$(docker ps -q --filter "publish=3001")
              if [ -n "$port_containers" ]; then
                docker stop $port_containers
                docker rm $port_containers
              fi
              
              lsof -ti:3001 | xargs kill -9 2>/dev/null || true
              
              sleep 2
              
              docker container prune -f
              docker image prune -f
              
              docker run -d \
                --name personal \
                --restart unless-stopped \
                -p 127.0.0.1:3001:3001 \
                ${{ env.DOCKER_IMAGE }}:prod
            "
          '
